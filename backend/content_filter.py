"""
Filtro de conte√∫do ofensivo para nicknames e tags
Detecta palavras ofensivas, obscenas, criminosas e inapropriadas em m√∫ltiplos idiomas
"""

import re
from typing import Tuple, List

# Lista de palavras ofensivas em portugu√™s e varia√ß√µes
OFFENSIVE_WORDS = {
    # Palavr√µes e termos obscenos
    "puta", "puto", "fdp", "caralho", "cacete", "porra", "merda", "bosta", 
    "viado", "bicha", "veado", "gay", "sapatao", "sapata", "traveco", "travecos",
    "cu", "cuzao", "buceta", "xoxota", "piroca", "pinto", "pau", "rola",
    "foda", "foder", "fuder", "fudido", "fodido", "fodao", "fudao",
    "arrombado", "arrombada", "corno", "cornudo", "vagabundo", "vagabunda",
    "pqp", "vsf", "tnc", "kct", "krl", "fdm", "ctg", "pdp",
    
    # Termos racistas e discriminat√≥rios
    "preto", "negro", "macaco", "macaca", "crioulo", "crioula", "pretinho",
    "branquelo", "amarelo", "japa", "japones", "china", "chines", "gringo",
    "nordestino", "baiano", "paraiba", "favelado", "favelada",
    
    # Termos de √≥dio e viol√™ncia
    "hitler", "nazismo", "nazista", "nazi", "swastika", "kkk", "ariano",
    "genocidio", "terrorista", "bomba", "explosivo", "matar", "morte",
    "suicidio", "suicida", "enforcar", "enforcado", "sangue", "assassino",
    
    # Termos sexuais expl√≠citos
    "sexo", "sexy", "tesao", "tesuda", "gostosa", "gostoso", "delicia",
    "punheta", "broxa", "brochar", "transar", "trepar", "fornicar",
    "oral", "anal", "orgia", "porn√¥", "porno", "pornografia",
    "estupro", "estuprador", "pedofilo", "pedofilia", "molestador",
    
    # Drogas e subst√¢ncias il√≠citas
    "maconha", "erva", "baseado", "beck", "fumar", "cheirar", "p√≥",
    "cocaina", "coca", "crack", "heroina", "lsd", "ecstasy", "bala",
    "traficante", "trafico", "dealer", "drogas", "drogado",
    
    # Termos criminosos
    "roubar", "roubo", "ladr√£o", "ladrao", "bandido", "bandida",
    "assalto", "assaltante", "marginal", "criminoso", "crime",
    "hacker", "hack", "invadir", "invasao", "fraude", "fraudador",
    
    # Varia√ß√µes com n√∫meros e s√≠mbolos comuns
    "p0rra", "m3rda", "b0sta", "fud1d0", "c4ralho", "put4",
    "s3x0", "dr0g4s", "m4t4r", "n4z1st4",
    
    # Palavras em ingl√™s comuns
    "fuck", "shit", "bitch", "ass", "dick", "cock", "pussy", "whore",
    "nigger", "nigga", "nazi", "kill", "death", "rape", "porn", "sex",
    "drug", "weed", "cocaine", "heroin",
    
    # Palavras em espanhol comuns
    "puta", "puto", "mierda", "culo", "polla", "verga", "chingar",
    "pendejo", "cabron", "marica", "maricon", "nazi", "matar",
}

# Padr√µes regex para detectar varia√ß√µes
OFFENSIVE_PATTERNS = [
    r"[p|P][u|U][t|T][a|A4@]",  # puta e varia√ß√µes
    r"[f|F][d|D][p|P]",  # fdp
    r"[c|C][u|U]",  # cu (palavra muito curta, cuidado)
    r"[n|N][a|A][z|Z][i|I]",  # nazi
    r"[k|K]{3,}",  # kkk
    r"[f|F][0o][d|D][a|A4@]",  # foda com varia√ß√µes
    r"[p|P][0o][r|R]{2}[a|A4@]",  # porra com varia√ß√µes
    r"[m|M][e|E3][r|R][d|D][a|A4@]",  # merda com varia√ß√µes
    r"[s|S][e|E3][x|X][0o]",  # sexo com varia√ß√µes
    r"\d{3,}",  # Sequ√™ncias longas de n√∫meros (suspeito)
]

# Palavras permitidas que podem ser confundidas (whitelist)
ALLOWED_WORDS = {
    "sexta", "sextante", "sexto", "sexta-feira",  # cont√©m "sexta" mas √© OK
    "texto", "contexto", "pretexto",  # cont√©m "texto" mas √© OK
    "osexto",  # sobrenome comum
    "puto" # pode ser usado como substantivo comum em alguns contextos (mas ainda assim vamos bloquear)
}

def normalize_text(text: str) -> str:
    """Normaliza texto para facilitar detec√ß√£o"""
    if not text:
        return ""
    
    # Remove espa√ßos extras e converte para min√∫sculas
    text = text.lower().strip()
    
    # Remove caracteres especiais comuns usados para disfar√ßar palavras
    replacements = {
        '@': 'a', '4': 'a', '3': 'e', '1': 'i', '!': 'i',
        '0': 'o', '$': 's', '7': 't', '8': 'b', '9': 'g',
        '+': 't', '*': 'a', '#': 'h'
    }
    
    for old, new in replacements.items():
        text = text.replace(old, new)
    
    return text

def contains_offensive_content(text: str) -> Tuple[bool, List[str]]:
    """
    Verifica se o texto cont√©m conte√∫do ofensivo
    
    Returns:
        Tuple[bool, List[str]]: (tem_conteudo_ofensivo, lista_de_palavras_encontradas)
    """
    if not text:
        return False, []
    
    normalized = normalize_text(text)
    found_offensive = []
    
    # Verifica palavras exatas
    words = normalized.split()
    for word in words:
        if word in OFFENSIVE_WORDS and word not in ALLOWED_WORDS:
            found_offensive.append(word)
    
    # Verifica palavras dentro do texto (substring)
    for offensive_word in OFFENSIVE_WORDS:
        if offensive_word in normalized and offensive_word not in ALLOWED_WORDS:
            # Verifica se n√£o est√° dentro de uma palavra permitida
            is_in_allowed = False
            for allowed in ALLOWED_WORDS:
                if offensive_word in allowed and allowed in normalized:
                    is_in_allowed = True
                    break
            
            if not is_in_allowed and offensive_word not in found_offensive:
                found_offensive.append(offensive_word)
    
    # Verifica padr√µes regex
    for pattern in OFFENSIVE_PATTERNS:
        matches = re.findall(pattern, normalized, re.IGNORECASE)
        if matches:
            found_offensive.extend([f"padr√£o: {m}" for m in matches if m not in found_offensive])
    
    return len(found_offensive) > 0, found_offensive

def is_valid_nickname(nickname: str, tag: str) -> Tuple[bool, str]:
    """
    Valida se nickname e tag s√£o apropriados
    
    Returns:
        Tuple[bool, str]: (√©_v√°lido, mensagem_de_erro)
    """
    # Valida√ß√µes b√°sicas de formato
    if not nickname or len(nickname) < 3:
        return False, "Nickname deve ter pelo menos 3 caracteres"
    
    if len(nickname) > 16:
        return False, "Nickname deve ter no m√°ximo 16 caracteres"
    
    if not tag or len(tag) < 3:
        return False, "Tag deve ter pelo menos 3 caracteres"
    
    if len(tag) > 6:
        return False, "Tag deve ter no m√°ximo 6 caracteres"
    
    # Verifica se cont√©m apenas caracteres alfanum√©ricos
    if not nickname.isalnum():
        return False, "Nickname deve conter apenas letras e n√∫meros"
    
    if not tag.isalnum():
        return False, "Tag deve conter apenas letras e n√∫meros"
    
    # Verifica conte√∫do ofensivo no nickname
    has_offensive_nick, offensive_words_nick = contains_offensive_content(nickname)
    if has_offensive_nick:
        return False, f"O nickname cont√©m conte√∫do inapropriado que viola nossas diretrizes. Por favor, escolha outro nome."
    
    # Verifica conte√∫do ofensivo na tag
    has_offensive_tag, offensive_words_tag = contains_offensive_content(tag)
    if has_offensive_tag:
        return False, f"A tag cont√©m conte√∫do inapropriado que viola nossas diretrizes. Por favor, escolha outra tag."
    
    # Verifica a combina√ß√£o completa
    full_name = f"{nickname}{tag}"
    has_offensive_full, offensive_words_full = contains_offensive_content(full_name)
    if has_offensive_full:
        return False, f"A combina√ß√£o nickname#tag cont√©m conte√∫do inapropriado que viola nossas diretrizes. Por favor, escolha outros valores."
    
    return True, ""

def get_content_filter_message() -> str:
    """Retorna mensagem amig√°vel sobre as diretrizes de conte√∫do"""
    return (
        "‚ö†Ô∏è Seu nickname ou tag cont√©m conte√∫do que viola nossas diretrizes.\n\n"
        "Por favor, evite usar:\n"
        "‚Ä¢ Palavr√µes ou linguagem obscena\n"
        "‚Ä¢ Termos ofensivos, racistas ou discriminat√≥rios\n"
        "‚Ä¢ Refer√™ncias a drogas, viol√™ncia ou atividades ilegais\n"
        "‚Ä¢ Conte√∫do sexual expl√≠cito\n"
        "‚Ä¢ S√≠mbolos de √≥dio ou terrorismo\n\n"
        "Escolha um nome que seja respeitoso e apropriado para todos! üòä"
    )
